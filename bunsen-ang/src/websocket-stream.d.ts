/** Declaration file generated by dts-gen */

export = websocket_stream;

declare function websocket_stream(target: any, protocols: any, options: any): any;

declare namespace websocket_stream {
    const prototype: {
    };

    function Server(...args: any[]): void;

    function createServer(opts: any, cb: any): any;

    namespace Server {
        class EventEmitter {
            constructor();

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static defaultMaxListeners: number;

            // static init(): void;

            // static listenerCount(emitter: any, type: any): any;

            static usingDomains: boolean;

        }

        const defaultMaxListeners: number;

        const usingDomains: boolean;

        function init(): void;

        function listenerCount(emitter: any, type: any): any;

        namespace EventEmitter {
            namespace init {
                const prototype: {
                };

            }

            namespace listenerCount {
                const prototype: {
                };

            }

            // namespace prototype {
            //     const domain: any;
            //
            //     function addListener(type: any, listener: any): any;
            //
            //     function emit(type: any, args: any): any;
            //
            //     function eventNames(): any;
            //
            //     function getMaxListeners(): any;
            //
            //     function listenerCount(type: any): any;
            //
            //     function listeners(type: any): any;
            //
            //     function on(type: any, listener: any): any;
            //
            //     function once(type: any, listener: any): any;
            //
            //     function prependListener(type: any, listener: any): any;
            //
            //     function prependOnceListener(type: any, listener: any): any;
            //
            //     function rawListeners(type: any): any;
            //
            //     function removeAllListeners(type: any, ...args: any[]): any;
            //
            //     function removeListener(type: any, listener: any): any;
            //
            //     function setMaxListeners(n: any): any;
            //
            //     namespace addListener {
            //         // Too-deep object hierarchy from websocket_stream.Server.EventEmitter.prototype.addListener
            //         const prototype: any;
            //
            //     }
            //
            //     namespace emit {
            //         // Too-deep object hierarchy from websocket_stream.Server.EventEmitter.prototype.emit
            //         const prototype: any;
            //
            //     }
            //
            //     namespace eventNames {
            //         // Too-deep object hierarchy from websocket_stream.Server.EventEmitter.prototype.eventNames
            //         const prototype: any;
            //
            //     }
            //
            //     namespace getMaxListeners {
            //         // Too-deep object hierarchy from websocket_stream.Server.EventEmitter.prototype.getMaxListeners
            //         const prototype: any;
            //
            //     }
            //
            //     namespace listenerCount {
            //         // Too-deep object hierarchy from websocket_stream.Server.EventEmitter.prototype.listenerCount
            //         const prototype: any;
            //
            //     }
            //
            //     namespace listeners {
            //         // Too-deep object hierarchy from websocket_stream.Server.EventEmitter.prototype.listeners
            //         const prototype: any;
            //
            //     }
            //
            //     namespace on {
            //         // Too-deep object hierarchy from websocket_stream.Server.EventEmitter.prototype.on
            //         const prototype: any;
            //
            //     }
            //
            //     namespace once {
            //         // Too-deep object hierarchy from websocket_stream.Server.EventEmitter.prototype.once
            //         const prototype: any;
            //
            //     }
            //
            //     namespace prependListener {
            //         // Too-deep object hierarchy from websocket_stream.Server.EventEmitter.prototype.prependListener
            //         const prototype: any;
            //
            //     }
            //
            //     namespace prependOnceListener {
            //         // Too-deep object hierarchy from websocket_stream.Server.EventEmitter.prototype.prependOnceListener
            //         const prototype: any;
            //
            //     }
            //
            //     namespace rawListeners {
            //         // Too-deep object hierarchy from websocket_stream.Server.EventEmitter.prototype.rawListeners
            //         const prototype: any;
            //
            //     }
            //
            //     namespace removeAllListeners {
            //         // Too-deep object hierarchy from websocket_stream.Server.EventEmitter.prototype.removeAllListeners
            //         const prototype: any;
            //
            //     }
            //
            //     namespace removeListener {
            //         // Too-deep object hierarchy from websocket_stream.Server.EventEmitter.prototype.removeListener
            //         const prototype: any;
            //
            //     }
            //
            //     namespace setMaxListeners {
            //         // Too-deep object hierarchy from websocket_stream.Server.EventEmitter.prototype.setMaxListeners
            //         const prototype: any;
            //
            //     }
            //
            // }

        }

        namespace init {
            const prototype: {
            };

        }

        namespace listenerCount {
            const prototype: {
            };

        }

        namespace prototype {
            const domain: any;

            function addListener(type: any, listener: any): any;

            function close(...args: any[]): void;

            function completeUpgrade(...args: any[]): void;

            function emit(type: any, args: any): any;

            function eventNames(): any;

            function getMaxListeners(): any;

            function handleUpgrade(...args: any[]): void;

            function listenerCount(type: any): any;

            function listeners(type: any): any;

            function on(type: any, listener: any): any;

            function once(type: any, listener: any): any;

            function prependListener(type: any, listener: any): any;

            function prependOnceListener(type: any, listener: any): any;

            function rawListeners(type: any): any;

            function removeAllListeners(type: any, ...args: any[]): any;

            function removeListener(type: any, listener: any): any;

            function setMaxListeners(n: any): any;

            function shouldHandle(...args: any[]): void;

            namespace addListener {
                const prototype: {
                };

            }

            namespace emit {
                const prototype: {
                };

            }

            namespace eventNames {
                const prototype: {
                };

            }

            namespace getMaxListeners {
                const prototype: {
                };

            }

            namespace listenerCount {
                const prototype: {
                };

            }

            namespace listeners {
                const prototype: {
                };

            }

            namespace on {
                const prototype: {
                };

            }

            namespace once {
                const prototype: {
                };

            }

            namespace prependListener {
                const prototype: {
                };

            }

            namespace prependOnceListener {
                const prototype: {
                };

            }

            namespace rawListeners {
                const prototype: {
                };

            }

            namespace removeAllListeners {
                const prototype: {
                };

            }

            namespace removeListener {
                const prototype: {
                };

            }

            namespace setMaxListeners {
                const prototype: {
                };

            }

        }

    }

    namespace createServer {
        const prototype: {
        };

    }

}

